#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <time.h>

typedef struct Node {
	char* info;
	int key;
	struct Node *left;
	struct Node *right;
	struct Node *par;
	struct Edge *ed;
} Node;

typedef struct Edge {
	struct Node *par;
	struct Node *child;
	struct Edge *next;
} Edge;

int dialog (Node* tree, FILE* f);
void inittree_zeroes (Node* tree);
void fileInput (Node* tr, FILE* f);
int find_key (Node* tr, int key);
void find_item (Node* tr);
void add (Node* tr);
void insert_item (Node* tr, char* info, int key);
//unsigned int Tree_Height (const Node* tr);
int check_int(int *a);
void show_tree (Node* tr);
void showLine (char* c, int p, int s);
void showTree (Node* wood, int p, int s);
void find_min (Node* tr);
void delete (Node* tr);
void show_after_key(Node* tr);
void show (Node* tr);
void showtree (Node* tr, int n);
int timing(Node*);

void inittree_zeroes(Node* tr){
	tr->info = NULL;
	tr->key = 0;
	tr->left = NULL;
	tr->right = NULL;
	tr->par = NULL;
}
	
void fileInput(Node* tr, FILE* f){
	char* info = (char*)malloc(10);
	int key;
	long int s;
	fseek (f, 0, SEEK_END);
	s = ftell(f);
	fseek (f, 0, SEEK_SET);
	while (ftell(f)+1 < s){
		fscanf (f, "%d%s", &key, info);
		insert_item (tr, info, key);
	}
	fclose(f);
}

void insert_item (Node* tr, char* info, int key){
	Node *x = (Node *)malloc(sizeof(Node));
	x->info = (char *) calloc(1, strlen(info));
	x->key = key;
	strcpy(x->info, info);
	x->left = NULL;
	x->right = NULL;
	if (tr->info == NULL){
		tr->info = (char *) calloc(1, strlen(info));
		tr->key = key;
		strcpy(tr->info, info);
		tr->left = NULL;
		tr->right = NULL;
		tr->par = NULL;
	}
	else{
		Node *tmp = (Node *)malloc(sizeof(Node));
		Node *par = (Node *)malloc(sizeof(Node));
		tmp = tr;
		par = NULL;
		while (tmp != NULL){
			par = tmp;
			if (key < tmp->key)
				tmp = tmp->left;
			else
				tmp = tmp->right;
		}
		if (key < par->key){
			par->left = x;
			par->left->par = par;
		}
		else
		{
			par->right = x;
			par->right->par = par;
		}
	}
}
	
int dialog(Node* tr, FILE* f){
	printf("Make your choice: --> \n");
	printf("0 - Quit, 1 - Add, 2 - Find, 3 - Delete, 4 - Show, 5 - timing\n");
	int c, n;
	check_int (&c);
	if (c==0)
		return 0;
	else{
		if (c==1)
			add(tr);
		if (c==2){
			printf("What do you want find?\n");
			printf("0 - info, 1 - min key\n");
			check_int(&n);
			if (n == 0)
				find_item (tr);
			if (n == 1)
				find_min (tr);
		}
		if (c==3)
			delete(tr);
		if (c==4){
			printf("What do you want show?\n");
			printf("0 - all tree, 1 - show after key\n");
			check_int(&n);
			if (n == 0)
				show (tr);
			if (n == 1)
				show_after_key(tr);
		}
		if (c==5)
			timing (tr);
	return 1;
	}
}

int check_int(int *a){
	int n;
	int tmp;
	tmp = scanf("%d", &n);
	while(((int) n!= n)||(tmp <=0 )) {
		printf("%s","You are wrong; repeat, please!\n");
		scanf("%*c");
		tmp = scanf("%d", &n);
	}
	*a=n/1;
	return 0;
}

void add(Node* tr){
	int n = 1;
	int key;
	char* info = (char*)malloc(10);
	while (n == 1){
		printf ("Enter key\n");
		scanf ("%d", &key);
		if (find_key (tr, key) == 1){
			printf ("such ver already exists, please choose another\n");
			scanf("%*c");
		}
		else
			n = 0;
	}
	insert_item (tr, info, key);
}

int find_key (Node* tr, int key){
	Node *tmp = (Node *)malloc(sizeof(Node));
	tmp = tr;
	while (tmp->info != NULL){
		if (tmp->key == key)
			return 1;
		else{
			if (tmp->key > key){
				if (tmp->left != NULL)
					tmp = tmp->left;
				else
					return 0;
			}
			else{
				if (tmp->right != NULL)
					tmp = tmp->right;
				else
					return 0;
			}
		}
	}
	return 0;
}

void find_item (Node* tr){
	int n = 0;
	int key;
	while (n == 0){
		printf ("Enter key (number)\n");
		check_int(&key);
		Node *tmp = (Node *)malloc(sizeof(Node));
		tmp = tr;
		while (tmp != NULL){
			if (tmp->key == key){
				printf ("%s\n", tmp->info);
				printf ("%d\n", tmp->par->key);
				n = 1;
				break;
			}
			if (tmp->key > key)
				tmp = tmp->left;
			else
				tmp = tmp->right;
		}
		if  (n == 0)
			printf ("such key don't found, please choose another\n");
	}
}

void find_min (Node* tr){
	int n = 0;
	int key;
	int k;
	Node *tmp = (Node *)malloc(sizeof(Node));
	tmp = tr;
	while (n == 0){
		printf ("Enter key (number)\n");
		check_int(&key);
		while (tmp != NULL){
			if (tmp->key > key){
				k = tmp->key;
				n = 1;
				break;
			}
			if (tmp->key > key)
				tmp = tmp->left;
			else
				tmp = tmp->right;
		}
		if  (n == 0)
			printf ("such key don't found, please choose another\n");
	}
		while (tmp != NULL){
			if ((tmp->key < k)&&(tmp->key > key))
				k = tmp->key;
			if (tmp->key > key)
				tmp = tmp->left;
			else
				tmp = tmp->right;
		}
		tmp = tr;
		while (tmp != NULL){
			if (tmp->key == k){
				printf ("%d\n", tmp->key);
				printf ("%s\n", tmp->info);
				break;
			}
			if (tmp->key > key)
				tmp = tmp->left;
			else
				tmp = tmp->right;
		}
}

void delete (Node* tr){
	int n = 0;
	int key;
	while (n == 0){
		printf ("Enter key (number)\n");
		check_int(&key);
		Node *tmp = (Node *)malloc(sizeof(Node));
		tmp = tr;
		while (tmp != NULL){
			if (tmp->key == key){
				n = 1;
				break;
			}
			if (tmp->key > key)
				tmp = tmp->left;
			else
				tmp = tmp->right;
		}
		if  (n == 0)
			printf ("such key don't found, please choose another\n");
	}
	Node * pointer = tr;
	Node * parent  = NULL;
	while ((pointer != NULL) && (pointer->key != key)){
        	parent = pointer;
        	if (key < pointer->key)
            		pointer = pointer->left;
        	else
            		pointer = pointer->right;
	}
	if (pointer != NULL){
        	Node * removed = NULL;
		if ((pointer->left == NULL) || (pointer->right == NULL)){   
			Node * child = NULL;
			removed = pointer;
		if (pointer->left != NULL)
		       child = pointer->left;
		else if (pointer->right != NULL)
		       child = pointer->right; 
		if (parent == NULL)
		       tr = child;
		else{
		       if (parent->left == pointer)
		       	parent->left = child;
		        else
		            	parent->right = child;
		}
        }
		else{
			Node * mostLeft = pointer->right;
			Node * mostLeftParent = pointer;
			while (mostLeft->left != NULL){
				mostLeftParent = mostLeft;
				mostLeft = mostLeft->left;
		    	}
			pointer->key = mostLeft->key;
			removed = mostLeft;
			if (mostLeftParent->left == mostLeft)
			       mostLeftParent->left = NULL;
			else
			       mostLeftParent->right = mostLeft->right;
		}
	}
}

void show_tree (Node* tr){
	int p = 0, s = 0;
	showTree(tr, p, s);
	Node *tmp = (Node *)malloc(sizeof(Node));
	tmp = tr;
	
}

/*unsigned int Tree_Height (const Node* tr){
	unsigned int l, r;
	if(tr != NULL){
		l = (tr->left  != NULL) ? Tree_Height(tr->left)  : 0;
		r = (tr->right != NULL) ? Tree_Height(tr->right) : 0;
		return ((l > r) ? l : r) + 1;
	    }
	return 0;
}*/

void showTree(Node* wood, int p, int s){
	if (wood == NULL)
		return;
	printf("%d", wood->key);
	printf("\n");
	if (wood->left != NULL){
        	showLine("|\n", p, s);
        	showLine("L: ", p, s);
        	showTree(wood->left, p+1, s + ((wood->right == NULL ? 0 : 1)<<p)); 
        }
        if (wood->right != NULL){        
        	showLine("|\n", p, s);
        	showLine("R: ", p, s);
        	showTree(wood->right, p+1, s);
	}
}

void showLine(char* c, int p, int s){
	int t=s, i; 
	for(i=0; i<p; i++){
		printf(t&1 ? "|  " : "   ");
		t/=2;
	}
	printf("%s", c);
}
void show (Node* tr){
	Node *tmp = (Node *)malloc(sizeof(Node));
	tmp = tr;
	int n = 0;
	showtree(tmp, n);
}

void showtree (Node* tmp, int n){
	int i = 0, k = 0;
	if (tmp == NULL)
		return;
	if (tmp->right != NULL){
		tmp = tmp->right;
		n++;
		showtree (tmp, n);
		k = 1;
	}
	if (k == 1){
		tmp = tmp->par;
		n--;
	}
	for (i = 0; i<n; i++)
		printf("   ");
	printf("%d\n", tmp->key);
	if (tmp->left != NULL){
		tmp = tmp->left;
		n++;
		showtree (tmp, n);
	}
}	

void show_after_key(Node* tr){
	int n = 0;
	int key;
	while (n == 0){
		printf ("Enter key (number)\n");
		check_int(&key);
		Node *tmp = (Node *)malloc(sizeof(Node));
		tmp = tr;
		while (tmp != NULL){
			if (tmp->key == key){
				tmp = tmp->right;
				int p = 0, s = 0;
				showTree (tmp, p, s);
				n = 1;
				break;
			}
			if (tmp->key > key)
				tmp = tmp->left;
			else
				tmp = tmp->right;
		}
		if  (n == 0)
			printf ("such key don't found, please choose another\n");
	}
}

int timing(Node *tr){
	Node *tree = malloc(sizeof(Node));
	*tree = *tr;
	int n = 10, key[10000], k, cnt = 1000000, i, m;
	clock_t first, last;
	srand(time(NULL));
	while (n-- > 0){
		for (i = 0; i < 10000; ++i)
			key[i] = rand() * rand();
		for (i = 0; i < cnt; ){
			k = rand() * rand();
			insert_item(tree, " ", k);
			i++;
		}
		m = 0;
		first = clock();
		for (i = 0; i < 10000; ++i)
			if (find_key(tree, key[i]))
				++m;
		last = clock();
		show (tr);
		printf("%d items was found\n", m);
		printf("test #%d, number of nodes = %d, time = %2ld\n", 10 - n, (10 -n)*cnt, (last - first));
	}
	return 1;
}


int main (){
	Node tree;
	inittree_zeroes(&tree);
	FILE* f;
	char* fname = (char*)malloc(10);
	while(1){
		printf("Введите название файла: \n");
		scanf ("%s", fname);
	if((f = fopen(fname, "rb"))==NULL){
		printf("Некорректно введено имя файла или такого файла не существует. Попробуйте ещё раз.\n");
		}
	    	else
			break;
	}
	f = fopen(fname, "rb");
	fileInput(&tree, f);
	while (dialog(&tree, f));
	printf("That's all. Bye!\n");
	return 0;
}
